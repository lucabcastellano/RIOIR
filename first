'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { Moon, Sun, Twitter, ArrowLeft } from 'lucide-react'

interface BlogPost {
  date: string
  title: string
  views: number
  slug: string
  content: string
}

const posts: BlogPost[] = [
  { date: "2021", title: "Making the Web. Faster.", views: 75958, slug: "making-the-web-faster", content: "Content for Making the Web. Faster." },
  { date: "2020", title: "Next for Vercel", views: 39732, slug: "next-for-vercel", content: "Content for Next for Vercel" },
  { date: "2020", title: "Books people re-read", views: 31271, slug: "books-people-reread", content: "Content for Books people re-read" },
  { date: "2020", title: "Develop, Preview, Test", views: 32800, slug: "develop-preview-test", content: "Content for Develop, Preview, Test" },
  { date: "2020", title: "Static Hoisting", views: 38135, slug: "static-hoisting", content: "Content for Static Hoisting" },
  { date: "2020", title: "An ode to code golf", views: 16917, slug: "code-golf", content: "Content for An ode to code golf" },
  { date: "2020", title: "Vercel", views: 58673, slug: "vercel", content: "Content for Vercel" },
  { date: "2020", title: "2019 in Review", views: 65142, slug: "2019-in-review", content: "Content for 2019 in Review" },
  { date: "2017", title: "It's Hard to Forego Efficiency", views: 44818, slug: "hard-to-forego-efficiency", content: "Content for It's Hard to Forego Efficiency" },
  { date: "2016", title: "Addressable Errors", views: 21869, slug: "addressable-errors", content: "Content for Addressable Errors" },
  { date: "2015", title: "Pure UI", views: 689736, slug: "pure-ui", content: "Content for Pure UI" },
  { date: "2015", title: "ECMAScript 6", views: 125951, slug: "ecmascript-6", content: "Content for ECMAScript 6" },
  { date: "2014", title: "7 Principles of Rich Web Applications", views: 714359, slug: "7-principles", content: "Content for 7 Principles of Rich Web Applications" },
]

export default function Home() {
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [currentSlug, setCurrentSlug] = useState('')
  const router = useRouter()

  useEffect(() => {
    const slug = window.location.pathname.split('/').pop()
    setCurrentSlug(slug || '')
    setIsDarkMode(window.matchMedia('(prefers-color-scheme: dark)').matches)
  }, [])

  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode)
    document.documentElement.classList.toggle('dark')
  }

  const currentPost = posts.find(post => post.slug === currentSlug)

  return (
    <div className={`min-h-screen ${isDarkMode ? 'dark' : ''}`}>
      <div className="bg-background text-foreground min-h-screen">
        <div className="mx-auto max-w-2xl px-4">
          {/* Header */}
          <header className="py-8 flex items-center justify-between">
            <h1 className="text-lg font-medium">
              <Link href="/" onClick={() => setCurrentSlug('')}>
                Your Name
              </Link>
            </h1>
            <nav className="flex items-center gap-4">
              <button
                onClick={toggleTheme}
                className="text-muted-foreground hover:text-foreground"
              >
                {isDarkMode ? (
                  <Moon className="h-4 w-4" />
                ) : (
                  <Sun className="h-4 w-4" />
                )}
                <span className="sr-only">Toggle theme</span>
              </button>
              <Link href="/about" className="text-sm text-muted-foreground hover:text-foreground">
                About
              </Link>
              <Link
                href="https://twitter.com/yourusername"
                className="text-sm text-muted-foreground hover:text-foreground inline-flex items-center gap-1"
              >
                <Twitter className="h-4 w-4" />
                Follow me
              </Link>
            </nav>
          </header>

          {/* Content */}
          {currentPost ? (
            <article className="py-8">
              <Link 
                href="/"
                className="inline-flex items-center text-sm text-muted-foreground hover:text-foreground mb-8"
                onClick={() => setCurrentSlug('')}
              >
                <ArrowLeft className="mr-2 h-4 w-4" />
                Back
              </Link>
              <h1 className="text-3xl font-bold mb-4">{currentPost.title}</h1>
              <p className="text-muted-foreground mb-8">{currentPost.date} â€¢ {currentPost.views.toLocaleString()} views</p>
              <div className="prose prose-gray dark:prose-invert">
                {currentPost.content}
              </div>
            </article>
          ) : (
            <div className="py-8">
              <table className="w-full">
                <thead className="text-sm text-muted-foreground">
                  <tr>
                    <th className="pb-4 font-normal text-left">date</th>
                    <th className="pb-4 font-normal text-left">title</th>
                    <th className="pb-4 font-normal text-right">views</th>
                  </tr>
                </thead>
                <tbody className="text-sm">
                  {posts.map((post) => (
                    <tr key={post.slug} className="group">
                      <td className="py-2 pr-4 align-top">{post.date}</td>
                      <td className="py-2 pr-4">
                        <Link
                          href={`/${post.slug}`}
                          onClick={(e) => {
                            e.preventDefault()
                            setCurrentSlug(post.slug)
                            router.push(`/${post.slug}`)
                          }}
                          className="group-hover:underline decoration-muted-foreground/30"
                        >
                          {post.title}
                        </Link>
                      </td>
                      <td className="py-2 text-right tabular-nums text-muted-foreground">
                        {post.views.toLocaleString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}


